blueprint:
  name: Fortgeschrittener benutzerdefinierter Bewegungssensor
  description: >
    Dieser Bewegungssensor basiert auf mehreren Ideen aus anderen Blueprints und beinhaltet eigene Anpassungen.

    Eingaben und Aktionen:
    - Schaltet Lichter oder Szenen ein, wenn Bewegung erkannt wird. Der Auslöser kann ein Bewegungssensor oder ein beliebiges Gerät sein, das zwischen "on" und "off" wechselt – mehrere Sensoren können verwendet werden.
    - Die Aktivierung kann in einem bestimmten Zeitfenster erfolgen (z. B. damit das Badezimmerlicht nicht mitten in der Nacht angeht).
    - Es wird ein Helligkeitswert definiert: Die Automation läuft nur, wenn es dunkler als der angegebene Lux-Wert ist.
    - Sonnenbedingung: Wähle, ob die Aktion immer, nur tagsüber (wenn die Sonne über dem Horizont ist) oder nur nachts (wenn die Sonne unter dem Horizont ist) ausgeführt wird.
    - Wartezeit zum Ausschalten.
    - Optionale Bedingungen: Die Aktion wird nur ausgeführt, wenn bestimmte optionale Entitäten im gewünschten Zustand sind.
    - Es kann eine Standardszene definiert werden, die aktiviert wird, wenn keine Bewegung mehr erkannt wird.
  domain: automation
  source_url: https://github.com/brigger/HomeAssistant_Blueprints/blob/main/advanced_custom_motion_sensor.yaml
  input:
    motion_entity:
      name: Bewegungssensor
      description: Bewegungssensor oder eine Gruppe von Sensoren (oder ein beliebiges Gerät, das zwischen "on" und "off" wechselt)
      selector:
        entity:
          multiple: true
    light_target:
      name: Licht
      selector:
        target:
          entity:
            domain: light
    luminance_sensor:
      name: Helligkeitssensor
      description: Dieser Sensor wird verwendet, um die aktuelle Helligkeit zu messen.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
          multiple: false
    luminance_required:
      name: Benötigter Lux-Wert
      description: Lux-Wert, unterhalb dessen die Automation ausgeführt wird.
      default: 100
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: lx
    no_motion_wait:
      name: Wartezeit
      description: Zeit in Sekunden, die das Licht nach der letzten Bewegung eingeschaltet bleibt.
      default: 120
      selector:
        number:
          min: 0.0
          max: 600.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    time_default_start:
      name: Standardszene nur ab dieser Zeit ausführen (Optional)
      description: Die Standardszene wird nur ausgeführt, wenn die Uhrzeit später als dieser Wert ist.
      default: 00:00:00
      selector:
        time: {}
    time_default_end:
      name: Standardszene nur bis zu dieser Zeit ausführen (Optional)
      description: Die Standardszene wird nur ausgeführt, wenn die Uhrzeit früher als dieser Wert ist.
      default: 00:00:00
      selector:
        time: {}
    sonnenbedingung:
      name: Sonnenbedingung
      description: Wähle, ob die Aktion immer, nur tagsüber (wenn die Sonne über dem Horizont ist) oder nur nachts (wenn die Sonne unter dem Horizont ist) ausgeführt wird.
      default: Immer
      selector:
        select:
          options:
            - Immer
            - Tag
            - Nacht
    automation_blocker:
      name: Automationsblocker (Optional)
      description: Die Automation wird nur ausgeführt, wenn diese boolesche Entität im gewünschten Zustand ist.
      default:
      selector:
        entity: {}
    automation_blocker_boolean:
      name: Automationsblocker-Wahl (Optional)
      description: Gewünschter Zustand des Automationsblockers – wähle "on" für an und "off" für aus.
      default: false
      selector:
        boolean: {}
    motion_off_blocker:
      name: Bewegungs-Aus-Blocker (Optional)
      description: Die "Bewegung aus"-Sequenz (wenn der Sensor von "on" zu "off" wechselt) wird nicht ausgeführt, wenn diese boolesche Entität im gewünschten Zustand ist.
      default:
      selector:
        entity: {}
    motion_off_blocker_boolean:
      name: Bewegungs-Aus-Wahl (Optional)
      description: Gewünschter Zustand des Bewegungs-Aus-Blockers.
      default: false
      selector:
        boolean: {}
    scene_ambient:
      name: Ambient-Szene (Optional)
      description: Szene für den Ambient-Zustand, die aktiviert wird, wenn keine Bewegung erkannt wird.
      default: scene.none
      selector:
        entity:
          domain:
            - scene
          multiple: false
    time_scene_ambient_start:
      name: Ambient-Zeitfenster Start (Optional)
      description: Zeit, ab der die Ambient-Szene aktiviert werden kann.
      default: 00:00:00
      selector:
        time: {}
    time_scene_ambient_end:
      name: Ambient-Zeitfenster Ende (Optional)
      description: Zeit, bis zu der die Ambient-Szene aktiviert werden kann.
      default: 00:00:00
      selector:
        time: {}
mode: restart
max_exceeded: silent
variables:
  scene_ambient: !input scene_ambient
  automation_blocker: !input automation_blocker
  automation_blocker_boolean: !input automation_blocker_boolean
  motion_off_blocker: !input motion_off_blocker
  motion_off_blocker_boolean: !input motion_off_blocker_boolean
  sonnenbedingung: !input sonnenbedingung
  motion_entity: !input motion_entity
  luminance_sensor: !input luminance_sensor
  luminance_required: !input luminance_required
trigger:
  - platform: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input motion_entity
    from: "on"
    to: "off"
    for: !input no_motion_wait
condition:
  - condition: or
    conditions:
      - "{{ automation_blocker == none }}"
      - "{{ automation_blocker_boolean and states[automation_blocker].state == 'on' }}"
      - "{{ not automation_blocker_boolean and states[automation_blocker].state == 'off' }}"
  - condition: template
    value_template: >
      {% if sonnenbedingung == 'Immer' %}
        true
      {% elif sonnenbedingung == 'Tag' %}
        {{ states('sun.sun') == 'above_horizon' }}
      {% elif sonnenbedingung == 'Nacht' %}
        {{ states('sun.sun') == 'below_horizon' }}
      {% else %}
        false
      {% endif %}
action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
          - condition: numeric_state
            entity_id: !input luminance_sensor
            below: !input luminance_required
        sequence:
          - condition: time
            after: !input time_default_start
            before: !input time_default_end
          - service: light.turn_on
            target: !input light_target
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
          - condition: or
            conditions:
              - "{{ motion_off_blocker == none }}"
              - "{{ motion_off_blocker_boolean and states[motion_off_blocker].state == 'on' }}"
              - "{{ not motion_off_blocker_boolean and states[motion_off_blocker].state == 'off' }}"
        sequence:
          - choose:
              - conditions:
                  - "{{ scene_ambient != 'scene.none' }}"
                  - condition: time
                    after: !input time_scene_ambient_start
                    before: !input time_scene_ambient_end
                sequence:
                  - scene: !input scene_ambient
            default:
              - service: light.turn_off
                target: !input light_target
