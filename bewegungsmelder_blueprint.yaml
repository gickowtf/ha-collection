blueprint:
  name: Fortgeschrittener benutzerdefinierter Bewegungssensor (überarbeitet)
  description:
    "- Möglichkeit, eine Lichtszene auszuwählen, um zu definieren, wie die Lichter leuchten sollen.\n
    - Lux-Wert.\n
    - Wartezeit in 10er Schritten, mit der Möglichkeit zur genauen Eingabe.\n
    - Zeitfelder für Lichtaktivierung und Ambient-Szene.\n
    - Möglichkeit, eine Blockdauer für den Automationsblocker festzulegen.\n"
  domain: automation
  input:
    motion_entity:
      name: Bewegungssensor
      description: Bewegungssensor oder eine Gruppe von Sensoren (oder ein beliebiges Gerät, das zwischen "on" und "off" wechselt)
      selector:
        entity:
          multiple: true
    light_target:
      name: Licht
      selector:
        target:
          entity:
            domain: light
    light_scene:
      name: Lichtszene (Optional)
      description: "Wähle eine Szene, um zu definieren, wie die ausgewählten Lichter leuchten sollen (z.B. Farbe, Helligkeit)."
      default: ""
      selector:
        entity:
          domain:
            - scene
    luminance_sensor:
      name: Helligkeitssensor
      description: Dieser Sensor wird verwendet, um die aktuelle Helligkeit zu messen.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
          multiple: false
    luminance_required:
      name: Benötigter Lux-Wert
      description: "Die Automation wird nur ausgeführt, wenn die gemessene Helligkeit unter diesem Wert liegt. Beispiel: 100 lx bedeutet, dass es dunkel genug sein muss."
      default: 100
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: lx
    no_motion_wait:
      name: Wartezeit
      description: "Zeit in Sekunden, die das Licht nach der letzten Bewegung eingeschaltet bleibt. Typische Werte in 10er Schritten (10, 20, 30...), aber auch andere Werte sind möglich."
      default: 120
      selector:
        number:
          min: 0.0
          max: 600.0
          unit_of_measurement: seconds
          mode: slider
          step: 10.0
    light_activation_time_start:
      name: Lichtaktivierung ab
      description: "Die Automation wird nur ausgeführt, wenn die aktuelle Uhrzeit nach diesem Wert liegt."
      default: 00:00:00
      selector:
        time: {}
    light_activation_time_end:
      name: Lichtaktivierung bis
      description: "Die Automation wird nur ausgeführt, wenn die aktuelle Uhrzeit vor diesem Wert liegt."
      default: 00:00:00
      selector:
        time: {}
    time_scene_ambient_start:
      name: Ambient-Zeitfenster Start (Optional)
      description: Zeit, ab der die Ambient-Szene aktiviert werden kann.
      default: 00:00:00
      selector:
        time: {}
    time_scene_ambient_end:
      name: Ambient-Zeitfenster Ende (Optional)
      description: Zeit, bis zu der die Ambient-Szene aktiviert werden kann.
      default: 00:00:00
      selector:
        time: {}
    automation_blocker:
      name: Automationsblocker (Optional)
      description: "Die Automation wird nur ausgeführt, wenn diese boolesche Entität im gewünschten Zustand ist."
      default:
      selector:
        entity: {}
    automation_blocker_boolean:
      name: Automationsblocker-Wahl (Optional)
      description: "Gewünschter Zustand des Automationsblockers – wähle 'on' für aktiv (Licht bleibt aus) oder 'off' für inaktiv."
      default: false
      selector:
        boolean: {}
    automation_blocker_duration:
      name: Blockdauer für Automationsblocker
      description: "Definiere, wie lange (in Sekunden) die Automation blockiert wird, wenn der Blocker aktiviert ist. Beispiel: 420 Sekunden (7 Minuten)."
      default: 420
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
          mode: slider
          step: 10
    motion_off_blocker:
      name: Bewegungs-Aus-Blocker (Optional)
      description: "Die 'Bewegung aus'-Sequenz wird nicht ausgeführt, wenn diese boolesche Entität im gewünschten Zustand ist."
      default:
      selector:
        entity: {}
    motion_off_blocker_boolean:
      name: Bewegungs-Aus-Wahl (Optional)
      description: "Gewünschter Zustand des Bewegungs-Aus-Blockers."
      default: false
      selector:
        boolean: {}
    scene_ambient:
      name: Ambient-Szene (Optional)
      description: "Szene für den Ambient-Zustand, die aktiviert wird, wenn keine Bewegung erkannt wird."
      default: scene.none
      selector:
        entity:
          domain:
            - scene
          multiple: false
  mode: restart
  max_exceeded: silent
  variables:
    scene_ambient: !input scene_ambient
    automation_blocker: !input automation_blocker
    automation_blocker_boolean: !input automation_blocker_boolean
    automation_blocker_duration: !input automation_blocker_duration
    motion_off_blocker: !input motion_off_blocker
    motion_off_blocker_boolean: !input motion_off_blocker_boolean
    light_scene: !input light_scene
    light_activation_time_start: !input light_activation_time_start
    light_activation_time_end: !input light_activation_time_end
    time_scene_ambient_start: !input time_scene_ambient_start
    time_scene_ambient_end: !input time_scene_ambient_end
    sonnenbedingung: !input sonnenbedingung
    motion_entity: !input motion_entity
    luminance_sensor: !input luminance_sensor
    luminance_required: !input luminance_required
trigger:
  - platform: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input motion_entity
    from: "on"
    to: "off"
    for: !input no_motion_wait
condition:
  - condition: template
    value_template: >
      {% if automation_blocker == none %}
         true
      {% else %}
         {% set desired = automation_blocker_boolean %}
         {% set blocker = states(automation_blocker) %}
         {% set elapsed = (as_timestamp(now()) - as_timestamp(blocker.last_changed)) | default(9999) %}
         {% if desired %}
           {{ blocker.state == 'on' and elapsed < automation_blocker_duration }}
         {% else %}
           {{ blocker.state == 'off' and elapsed < automation_blocker_duration }}
         {% endif %}
      {% endif %}
  - condition: template
    value_template: >
      {% if sonnenbedingung == 'Immer' %}
        true
      {% elif sonnenbedingung == 'Tag' %}
        {{ states('sun.sun') == 'above_horizon' }}
      {% elif sonnenbedingung == 'Nacht' %}
        {{ states('sun.sun') == 'below_horizon' }}
      {% else %}
        false
      {% endif %}
action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
          - condition: numeric_state
            entity_id: !input luminance_sensor
            below: !input luminance_required
        sequence:
          - condition: time
            after: !input light_activation_time_start
            before: !input light_activation_time_end
          - choose:
              - conditions: "{{ light_scene != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input light_scene
              - default:
                  - service: light.turn_on
                    target: !input light_target
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
          - condition: template
            value_template: >
              {% if motion_off_blocker == none %}
                true
              {% else %}
                {% set mob = states(motion_off_blocker) %}
                {% if motion_off_blocker_boolean %}
                  {{ mob.state == 'on' }}
                {% else %}
                  {{ mob.state == 'off' }}
                {% endif %}
              {% endif %}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ scene_ambient != 'scene.none' }}"
                  - condition: time
                    after: !input time_scene_ambient_start
                    before: !input time_scene_ambient_end
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_ambient
            default:
              - service: light.turn_off
                target: !input light_target