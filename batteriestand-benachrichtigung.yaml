blueprint:
  name: Erkennung & Benachrichtigung bei niedrigem Batteriestand für alle Batterie-Sensoren
  description: >
    Überprüft regelmäßig alle Sensoren mit der Geräteklasse 'battery', ob sie 
    einen bestimmten Schwellenwert unterschreiten, und führt dann eine Aktion aus.
  domain: automation
  input:
    threshold:
      name: Schwellenwert für Batteriewarnung
      description: Batterie-Sensoren unterhalb dieses Wertes werden als schwach angesehen 
        (ebenso wie binäre Batterie-Sensoren mit dem Wert 'on').
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0
    time:
      name: Zeitpunkt der Überprüfung
      description: Die Überprüfung wird zur konfigurierten Zeit durchgeführt.
      default: '10:00:00'
      selector:
        time: {}
    day:
      name: Wochentage der Überprüfung
      description: >
        Wähle die Wochentage aus, an denen die Überprüfung durchgeführt werden soll.
        Mehrere Tage können gleichzeitig ausgewählt werden.
      default: []
      selector:
        select:
          options:
            - label: Montag
              value: "1"
            - label: Dienstag
              value: "2"
            - label: Mittwoch
              value: "3"
            - label: Donnerstag
              value: "4"
            - label: Freitag
              value: "5"
            - label: Samstag
              value: "6"
            - label: Sonntag
              value: "7"
          multiple: true
          mode: list
    exclude:
      name: Ausgeschlossene Sensoren
      description: Batterie-Sensoren (z. B. Smartphone), die von der Erkennung ausgeschlossen werden sollen. 
        Nur Entitäten werden unterstützt, Geräte müssen einzeln ausgewählt werden!
      default: {entity_id: []}
      selector:
        target:
          entity:
            device_class: battery
    actions:
      name: Aktionen
      description: Benachrichtigungen oder ähnliche Aktionen, die ausgeführt werden sollen. 
        {{sensors}} wird durch die Namen der Sensoren mit niedrigem Batteriestand ersetzt.
      selector:
        action: {}

variables:
  day: !input 'day'
  threshold: !input 'threshold'
  exclude: !input 'exclude'
  sensors: >-
    {% set result = namespace(sensors=[]) %}
    {% for state in states.sensor 
        | selectattr('attributes.device_class', '==', 'battery') 
        | selectattr('attributes.unit_of_measurement', 'defined') 
        | selectattr('attributes.unit_of_measurement', '==', '%') %}
      {% if 0 <= state.state | int(-1) < threshold | int and not state.entity_id in exclude.entity_id %}
        {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
      {% endif %}
    {% endfor %}
    {% for state in states.binary_sensor 
        | selectattr('attributes.device_class', '==', 'battery') 
        | selectattr('state', '==', 'on') %}
      {% if not state.entity_id in exclude.entity_id %}
        {% set result.sensors = result.sensors + [state.name] %}
      {% endif %}
    {% endfor %}
    {{ result.sensors | join('\n') }}

trigger:
- platform: time
  at: !input 'time'

condition:
- "{{ sensors != '' and (now().isoweekday() | string) in day }}"

action:
- choose: []
  default: !input 'actions'

mode: single